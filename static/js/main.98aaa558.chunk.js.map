{"version":3,"sources":["Components/Cards/Cards.module.css","Components/Cards/Cards.jsx","api/index.js","Components/Charts/Charts.jsx","Components/Country/Country.jsx","App.js","serviceWorker.js","index.js","App.module.css","Components/Charts/Charts.module.css","Components/Country/Country.module.css","image/Covid 19.jpg"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Charts","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","Country","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","style","image","src","corona","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.98aaa558.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1BQRz\",\"card\":\"Cards_card__JMYj-\",\"infected\":\"Cards_infected__iLmJK\",\"recovered\":\"Cards_recovered__rjxo6\",\"deaths\":\"Cards_deaths__3Wlrs\"};","import React from 'react';\r\nimport {Card, CardContent, Typography, Grid, StylesProvider} from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames'\r\n\r\n\r\n\r\n\r\n\r\nconst Cards= ({data: {confirmed,recovered,deaths,lastUpdate}})=>{\r\n    if(!confirmed){\r\n        return 'Loading ...';\r\n    }\r\n    return(\r\n    <div className={styles.container}>\r\n        <Grid container spacing={3} justify=\"center\">\r\n\r\n            <Grid item component= {Card} xs={12} md={3} className={cx(styles.Card, styles.infected)}>\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>infected</Typography>\r\n                    <Typography variant=\"h5\">\r\n                        <CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\"/>\r\n                    </Typography>\r\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variant=\"body2\">Number of Active Cases of COVID-19</Typography>\r\n                </CardContent>\r\n            </Grid>\r\n\r\n            <Grid item component= {Card} xs={12} md={3} className={cx(styles.Card, styles.recovered)}>\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                    <Typography variant=\"h5\">\r\n                        <CountUp start={0} end={recovered.value} duration={2.5} separator=\",\"/>\r\n                    </Typography>\r\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variant=\"body2\">Number of Recoveries from COVID-19</Typography>\r\n                </CardContent>\r\n            </Grid>\r\n\r\n            <Grid item component= {Card} xs={12} md={3} className={cx(styles.Card, styles.deaths)}>\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>Death</Typography>\r\n                    <Typography variant=\"h5\">\r\n                        <CountUp start={0} end={deaths.value} duration={2.5} separator=\",\"/>\r\n                    </Typography>\r\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variant=\"body2\">Number of Death Caused by COVID-19</Typography>\r\n                </CardContent>\r\n            </Grid>\r\n\r\n        </Grid> \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Cards;\r\n//npm install --save @material-ui/core (for cards like boostrap)\r\n//npm start to start the project\r\n","import axios from 'axios';\r\nconst url= 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData= async(country)=> {\r\n    let changableUrl= url;\r\n    if(country){\r\n        changableUrl= `${url}/countries/${country}`\r\n    }\r\n    try{\r\n        const {data:{confirmed,recovered,deaths,lastUpdate}} = await axios.get(changableUrl);\r\n        \r\n\r\n        return {confirmed,recovered,deaths,lastUpdate};\r\n\r\n    }\r\n    catch(error){\r\n        console.log(error)\r\n\r\n    }\r\n}\r\nexport const fetchDailyData= async()=> {\r\n    try{\r\n        const {data}= await axios.get(`${url}/daily`);\r\n        const modifiedData=data.map((dailyData)=>({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date:  dailyData.reportDate\r\n        }));\r\n        return modifiedData;\r\n\r\n\r\n    }\r\n    catch(error){\r\n        console.log(error);\r\n\r\n    }\r\n}\r\nexport const fetchCountries= async ()=>{\r\n    try{\r\n        const {data:{countries}}= await axios.get(`${url}/countries`);\r\n        return countries.map((country)=>country.name)\r\n\r\n    } catch (error){\r\n        console.log(error);\r\n\r\n    }\r\n}","import React,{useState,useEffect} from 'react';\r\nimport {fetchDailyData} from '../../api';\r\nimport {Line, Bar} from 'react-chartjs-2';\r\nimport styles from './Charts.module.css';\r\nimport { DialogTitle } from '@material-ui/core';\r\n\r\n\r\nconst Charts= ({data:{confirmed,deaths,recovered},country})=>{\r\n    const[dailyData,setDailyData]=useState([]);\r\n    useEffect(()=>{\r\n        const fetchAPI= async()=>{\r\n            setDailyData (await fetchDailyData());\r\n        }\r\n        \r\n        fetchAPI();\r\n    },[]);\r\n    const lineChart =(\r\n        dailyData.length //0\r\n        ? (\r\n            <Line\r\n                data={{\r\n                labels: dailyData.map(({ date})=> date),\r\n                datasets: [{\r\n                    data: dailyData.map(({ confirmed})=> confirmed),\r\n                    label: \"infected\",\r\n                    borderColor: '#3333ff',\r\n                    fill: true,\r\n                },\r\n                {\r\n                    data: dailyData.map(({ deaths})=> deaths),\r\n                    label: \"Deaths\",\r\n                    borderColor: 'red',\r\n                    backgroundColor: 'rgba(255,0,0,0.5)',\r\n                    fill: true,\r\n\r\n                }],\r\n                }}\r\n            />): null\r\n\r\n        );\r\n        console.log(confirmed,recovered,deaths)\r\n    const barChart= (\r\n        confirmed\r\n        ? (\r\n            <Bar \r\n                data={{\r\n                labels:['infected','Recovered', 'Deaths'],\r\n                datasets:[{\r\n                    label: 'People',\r\n                    backgroundColor:[\r\n                        'rgba(0,0,255,.5)',\r\n                        'rgba(0,255,0,.5)',\r\n                        'rgba(255,0,0,.5)'\r\n                    ],\r\n                    data:[confirmed.value,recovered.value,deaths.value]\r\n                }]\r\n\r\n                }}\r\n                options={{\r\n                    legend:{ display:false},\r\n                    title: {display: true, text:`Current state in ${country}`}\r\n                }}\r\n            />\r\n        ): null\r\n            \r\n       \r\n    )\r\n    return(\r\n    <div className={styles.container}>\r\n        {country? barChart:lineChart}\r\n\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Charts;","import React, {useState,useEffect} from 'react';\r\nimport {NativeSelect, FormControl, StylesProvider} from '@material-ui/core';\r\nimport styles from './Country.module.css';\r\nimport {fetchCountries} from '../../api';\r\n\r\n\r\nconst Country= ({handleCountryChange})=>{\r\n    const [fetchedCountries, setFetchedCountries]= useState([]);\r\n    useEffect( ()=> \r\n    {const fetchAPI=async() => {\r\n        setFetchedCountries(await fetchCountries());\r\n    }\r\n    fetchAPI();\r\n\r\n    }, [setFetchedCountries]);\r\n    return(\r\n    <FormControl className={styles.formControl}>\r\n        <NativeSelect defaultValue='' onChange={(e)=>handleCountryChange(e.target.value)}>\r\n            <option value=\"\">Global</option>\r\n            {fetchedCountries.map((country,i)=> \r\n            <option key={i} value={country}>{country}</option>)}\r\n        </NativeSelect>\r\n    </FormControl>\r\n    )\r\n}\r\n\r\nexport default Country;\r\n","import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n// import Cards from './Components/Cards/Cards';\n// import Chart from './Components/Chart/Chart';\n// import Country from './Components/Country/Country';\n\nimport {Cards, Charts,Country} from './Components';// Depending on index.js in components folder\nimport style from './App.module.css';\nimport {fetchData} from './api';\nimport corona from './image/Covid 19.jpg';\n\n\nclass App extends React.Component {\n  state= {\n    data:{},\n    country: '',\n\n  }\n  async componentDidMount(){\n    const fetchedData= await fetchData();\n    this.setState({data:fetchedData})\n  }\n  handleCountryChange= async (country) =>{\n    \n    const fetchedData= await fetchData(country);\n    this.setState({data: fetchedData, country: country});\n\n  }\n  render(){\n    const {data,country}= this.state;\n    return(\n        <div className={style.container}> \n          <img className={style.image} src={corona} alt=\"COVID\"/>\n          <Cards data={data}/>\n          <Country handleCountryChange={this.handleCountryChange}/>\n          <Charts data={data} country = {country}/>\n        </div>\n   );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2sEQ0\",\"App\":\"App_App__EsewA\",\"image\":\"App_image__tQzl-\",\"App-logo\":\"App_App-logo__2h8UO\",\"App-header\":\"App_App-header__2rfT9\",\"App-link\":\"App_App-link__3vLjW\",\"App-logo-spin\":\"App_App-logo-spin__3gOJ4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__27v4Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"Country_formControl__2G-UW\"};","module.exports = __webpack_public_path__ + \"static/media/Covid 19.5582b802.jpg\";"],"sourceRoot":""}